from django.shortcuts import render, get_object_or_404, render_to_response
from django.http import HttpResponse, HttpResponseRedirect
from django.template import RequestContext, loader
from django.conf import settings
from myapp.models import Newsfeed, Category, Article, ArticleComment, ArticleVote
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django import forms
from django.contrib.auth.forms import UserCreationForm
from myapp.forms import UserForm, CategoryForm, ArticleForm, CommentForm
from django.utils import timezone
from django.views.generic import View

def signin(request):
    context = RequestContext(request)
    registered = False
    if request.method == 'POST':
        user_form = UserForm(data=request.POST)
        if user_form.is_valid():
            user = user_form.save()
            user.set_password(user.password)
            user.save()
            
            registered = True
            newsfeed = Newsfeed(newsfeed_id=user.username, user=user)
            newsfeed.save()
        else:
            print user_form.errors
    else:
        user_form = UserForm()
        
    return render_to_response(
        'myapp/base_signin.html',
        {'user_form': user_form, 'registered': registered},
        context
    )

def auth_view(request):
    user_form = UserForm(data=request.POST)
    user = authenticate(username=user_form.username, password=user_form.password)
    if user is not None and user.is_active:
            login(request, user)
            # Redirect to a success page.
            return HttpResponseRedirect('/myapp/')
    else:
        # Return an 'invalid login' error message
        #return invalid(self)
        print user_form.errors
    return render_to_response(
        'myapp/base_login.html',
        {'user_form': user_form},
        context
    )
        
def logout_view(request):
    logout(request)
    # Redirect to a success page.
    return render(request, 'myapp/base_logout.html')

@login_required  
class Index(View):
    def get(self, request)
    latest_articles_list = Article.objects.order_by('-pub_date')[:5]
    context = {
        'latest_articles_list': latest_articles_list,
    }
    return render(request, 'myapp/base_index.html', context)

@login_required   
def category(request, category_name):
    category = get_object_or_404(Category, name=category_name)
    article_list = Article.objects.filter(category=category_name)
    return render(request, 'myapp/base_category.html', 
        {'category': category, 'article_list': article_list}
    )

@login_required    
def article(request, category_name, article_id):
    category = get_object_or_404(Category, name=category_name)
    article = get_object_or_404(Article, id=article_id, category=category)
    comment_list = ArticleComment.objects.filter(article=article).order_by('-pub_date')
    posted = False
    context = RequestContext(request)
    if request.method == 'POST':
        comment_form = CommentForm(data=request.POST)
        user = request.user
        if comment_form.is_valid():
            comment_text = comment_form.cleaned_data['comment_text']
            comment = ArticleComment(user=user, article=article, comment_text=comment_text, pub_date=timezone.now())
            comment.save()
            article.comments = article.comments+1
            article.save()
            posted = True
        else:   
            print comment_form.errors
    else:
        comment_form = CommentForm()
    return render_to_response(
        'myapp/base_article.html',
        {'posted': posted, 'article': article, 'comment_list': comment_list},
        context
    )
    
    
@login_required
def category_create(request):
    alreadycreated = False
    created = False
    context = RequestContext(request)
    if request.method == 'POST':
        category_form = CategoryForm(data=request.POST)
        user = request.user
        
        if category_form.is_valid():
            category_name = category_form.cleaned_data['name']
            category_ex = Category.objects.filter(name=category_name)
            if category_ex.exists():
                alreadycreated = True
            else:
                category = Category(name=category_name, user=user, pub_date=timezone.now())
                category.save()
                created = True
            
        else:
            create = False
            alreadycreated = True
    else:
        category_form = CategoryForm()
    return render_to_response(
        'myapp/base_category_create.html',
        {'alreadycreated': alreadycreated, 'created': created},
        context
    )
    
@login_required
def article_create(request):
    alreadycreated = False
    created = False
    category_list = Category.objects.order_by('name')
    context = RequestContext(request)
    if request.method == 'POST':
        article_form = ArticleForm(data=request.POST)
        user = request.user
        if article_form.is_valid():
            article_name = article_form.cleaned_data['name']
            article_url = article_form.cleaned_data['article_url']
            category_name = article_form.cleaned_data['category_name']
            category = get_object_or_404(Category, name=category_name)
            time = timezone.now()
            article = Article(name=article_name, article_url=article_url, user=user, category=category, pub_date=time)
            article.save()
            created = True
            
        else:
            alreadycreated = True
    else:
        article_form = ArticleForm()
    return render_to_response(
        'myapp/base_article_create.html',
        {'alreadycreated': alreadycreated, 'created': created, 'category_list': category_list},
        context
    )
    

def about(request):    
    return render(request, 'myapp/base_about.html')
    

def contact(request):    
    return render(request, 'myapp/base_contact.html')    


@login_required   
def categories(request):
    context = RequestContext(request)
    category_list = Category.objects.order_by('name')
    mycategories = False
    if request.method == 'GET':
        category_name = request.GET.get('category_name')
        if category_name is not None:
            return categories_search(request, category_name)
    return render_to_response('myapp/base_categories.html',{'mycategories': mycategories, 'category_list': category_list} ,context)  
    
@login_required    
def mycategories(request):
    context = RequestContext(request)
    user = request.user
    newsfeed = Newsfeed.objects.get_or_create(newsfeed_id=user.username, user = user)
    category_list = Category.objects.filter(newsfeed=newsfeed)
    mycategories = True
    if request.method == 'GET':
        category_name = request.GET.get('category_name')
        if category_name is not None:
            return categories_search(request, category_name, mycategories)
    return render_to_response('myapp/base_categories.html',{'mycategories': mycategories, 'category_list': category_list} ,context)     

@login_required    
def category_addition(request): 
    context = RequestContext(request)
    user = request.user
    added = False
    newsfeed, created = Newsfeed.objects.get_or_create(newsfeed_id=user.username, user=user)
    available_category_list = Category.objects.all().exclude(newsfeed=newsfeed)
    if request.method == 'POST':
        category_form = CategoryForm(data=request.POST)
        if category_form.is_valid():
            category_name = category_form.cleaned_data['name']
            category = Category.objects.get(name=category_name)
            category.newsfeed.add(newsfeed)
            category.save()
            added = True
        else:
            return HttpResponse("WRONG FORM")
    else:
        category_form = CategoryForm()
    return render_to_response(
        'myapp/base_category_add.html',
        {'added': added, 'created': created, 'available_category_list': available_category_list},
        context
    )
  
  
@login_required   
def categories_search(request, category_name, mycategories=False):
    searched_result = True
    if mycategories:
        user = request.user
        newsfeed = Newsfeed.objects.get_or_create(newsfeed_id=user.username, user = user)
        category_list = Category.objects.filter(newsfeed=newsfeed, name__startswith=category_name)
    else:
        category_list = Category.objects.filter(name__startswith=category_name)
        
    context = {'mycategories': mycategories, 'category_list': category_list, 'searched_result': searched_result}
    return render(
        request,
        'myapp/base_categories.html',
        context     
    )      
  
@login_required
def search_bar(request):
    return render(request, 'myapp/base_search.html')
  
